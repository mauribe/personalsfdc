<apex:page >
<!-- Remote Objects definition to set accessible sObjects and fields -->
<apex:remoteObjects jsNamespace="SContactModel" >
<!-- by default the base model is named SObjectModel, but you can set the name by using the jsNamespace attribute ex. SContactModel -->
<apex:remoteObjectModel name="Lead" fields="Name,Id, Company"> 
<!-- <apex:remoteObjectModel name="Contact" fields="FirstName,LastName,Phone" create="{!$RemoteAction.RemoteObjectContactOverride.create}"/> 
To override a Remote Objects operation with a remote method. Implement a class (RemoteObjectContactOverride) and a method (create) with @RemoteAction example:
@RemoteAction
public static Map<String, Object> create(String type, Map<String, Object> fields) {
Map<String, Object> result = RemoteObjectController.create(type, fields); //automatically handles sharing rules, ownership, and other security concerns for Remote Objects
return result;
}
As a best practice, use the with sharing keyword for your controller or controller extension class, and delegate as much as you can to the RemoteObjectController.
 -->

<apex:remoteObjectField name="Phone"/> 
<!-- fields="Name,id" used by JS to make a query 
Fields defined in remoteObjectField, instead of the fields attribute of apex:remoteObjectModel, can have a shorthand name-->
</apex:remoteObjectModel>
</apex:remoteObjects>

<!-- JavaScript to make Remote Objects calls -->
    <script>
        var fetchLead = function(){
            // Create a new Remote Object
            var wh = new SContactModel.Lead(); //is a JavaScript model for the Lead object, not a specific Contact record. the name was defined in jsNamespace
            // Use the Remote Object to query for 10 warehouse records
            wh.retrieve({ limit: 1 },            
                function(err, records, event){
                if(err) {
                    alert(err.message);
                }
                else {
                    var ul = document.getElementById("warehousesList");
                    records.forEach(function(record) {
                        // Build the text for a warehouse line item
                        var whText = record.get("Name");
                        whText += " -- ";
                        whText += record.get("Phone");
                        whText += " -- ";
                        whText += record.get("Company");
                        // Add the line item to the warehouses list
                        var li = document.createElement("li");
                        li.appendChild(document.createTextNode(whText));
                        ul.appendChild(li);
                    });
                }
            });
        };

        var createLead = function() {
            alert('oooh');
            var ctDetails = { FirstName: 'Marc', LastName: 'Benioff', Company: 'SFDC.com' };
            var wh = new SContactModel.Lead();
            wh.create(ctDetails, function(err) {
                if(err) {
                    console.log(err);
                    alert(err.message);
                }
                else {
                    // this is the contact
                    console.log(wh.log()); // Dump contact to log
                    console.log(wh.get('Id')); // Id is set when create completes
                }
            });
        };


    </script>
<h1>Retrieve Leads via Remote Objects</h1>
<p>Leads:</p>
<ul id="warehousesList">
</ul>
<button onclick="fetchLead()">Retrieve Leads</button> <br/>

<h1>Create Leads via Remote Objects</h1>
<p>Leads:</p>
<button onclick="createLead()">Create Leads</button>

</apex:page>